@page "/movies/details"
@inject OcenaFilmow.Data.ApplicationDbContext DB
@using OcenaFilmow
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using System
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">RelaseDate</dt>
            <dd class="col-sm-10">@movie.RelaseDate</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@Math.Round((decimal)movie.Rate, 2)</dd>
            <!--dt class="col-sm-2">Image</!--dt-->
            <dd class="col-sm-10"><img src="@movie.ImageUrl" alt="Movie Image" /></dd>
        </dl>
        <dt class="col-sm-2">Your Rate</dt>
        <input type="number" @bind="myNumber" min="1" max="10" step="1" />
        <button @onclick="AddRate" type="submit" class="btn btn-primary small-btn">Add Rate</button>
        <div>
            <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>
    }
</div>

@code {
    int myNumber { get; set; }
    Movie? movie;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task AddRate()
    {
        if (movie != null)
        {
            if (myNumber >= 1 && myNumber <= 10 && myNumber % 1 == 0)
            {
                var totalRates = movie.Rate * movie.TotalRatings;
                movie.TotalRatings++;
                movie.Rate = (totalRates + myNumber) / movie.TotalRatings;

                try
                {
                    await DB.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    NavigationManager.NavigateTo("notfound");
                }
            }
        }
    }
}